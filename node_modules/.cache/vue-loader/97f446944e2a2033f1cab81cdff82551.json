{"remainingRequest":"/home/satyadarshin/Documents/www/development/rocket-science/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/satyadarshin/Documents/www/development/rocket-science/src/components/AuthorTable.vue?vue&type=style&index=0&id=75d924fa&lang=scss&scoped=true&","dependencies":[{"path":"/home/satyadarshin/Documents/www/development/rocket-science/src/components/AuthorTable.vue","mtime":1593872171810},{"path":"/home/satyadarshin/Documents/www/development/rocket-science/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/satyadarshin/Documents/www/development/rocket-science/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/satyadarshin/Documents/www/development/rocket-science/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/satyadarshin/Documents/www/development/rocket-science/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/satyadarshin/Documents/www/development/rocket-science/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/satyadarshin/Documents/www/development/rocket-science/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCnRoIHsKICAgIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplOwogICAgY3Vyc29yOiBwb2ludGVyOwp9Cg=="},{"version":3,"sources":["AuthorTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoJA;AACA;AACA;AACA","file":"AuthorTable.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div>\n        <md-table>\n            <md-table-toolbar>\n                <div class=\"md-toolbar-section-start\">\n                    <div class=\"md-layout-item\">\n                    <md-field>\n                        <md-select v-model=\"pageSize\" name=\"pageSize\" id=\"pageSize\" placeholder=\"Number of rows\">\n                            <!-- <md-option value=\"10\">10</md-option> -->\n                            <md-option value=\"25\">25</md-option>\n                            <md-option value=\"50\">50</md-option>\n                            <md-option value=\"75\">75</md-option>\n                            <md-option value=\"100\">100</md-option>\n                        </md-select>\n                    </md-field>\n                    </div>\n                </div>\n                <md-field md-clearable class=\"md-toolbar-section-end\">\n                    <md-input placeholder=\"Search by name...\" v-model=\"search\" />\n                </md-field>\n            </md-table-toolbar> \n            <md-table-row>\n                <md-table-head\n                    v-for=\"(column, index) in columns\"\n                    :key=\"index\"\n                    >\n                    <span @click=\"sortBy(column)\">{{ column }}</span>\n                </md-table-head>\n            </md-table-row>\n            <md-table-row \n                v-for=\"author in resultQuery\"\n                :key=\"author.id\"\n                itemscope itemtype=\"http://schema.org/author\"\n            >\n                <md-table-cell><router-link :to=\"'/authors/' + lastFirstLastNameURL(author.name)\">{{ author.name }}</router-link></md-table-cell>\n                <md-table-cell>{{ author.born | dateFormat }}</md-table-cell>\n                <md-table-cell>{{ author.died | dateFormat}}</md-table-cell>\n            </md-table-row>\n            <app-pagination-switcher :paginationRange=\"count\" :pagePosition=\"currentPage\" @update=\"travesePagination\" />\n        </md-table>\n    </div>\n</template>\n\n<script>\nimport PaginationSwitcher from '@/components/PaginationSwitcher'\nexport default {\n    data() {\n        return {\n            search: '', //for table search\n            searched: [], //for table search\n            sortKey: 'name',\n            sortDirection: 'asc',\n            columns: ['name', 'born', 'died'],\n            theDate: '',\n            pageSize: 10,\n            currentPage: 1,\n            count: 1\n        }\n    },\n    props: {\n        authorList: Array\n    },\n    components: {\n        appPaginationSwitcher: PaginationSwitcher\n    },\n    methods: {\n        sortBy(sortCriteria) {\n            if (sortCriteria === this.sortKey) {\n                this.sortDirection = (this.sortDirection === 'asc') ? 'desc':'asc'\n            }\n            this.sortKey = sortCriteria\n        },\n        lastFirstLastNameURL: ( lastFirstName ) => {\n            //Make an SEO friendly URL.\n            //Reverse to first-surname order, and replace space and commas with underscores to be properly formatted URLs\n            let firstLastName = \"\"\n            return firstLastName = lastFirstName.split(\", \").reverse().join(\" \").replace(/[ ,]/g, \"_\")\n        },\n        pageSwitcher() {\n            const totalPageSet = this.pageCount\n        },    \n        travesePagination(traverse) {\n            this.currentPage = traverse\n        }  \n    },\n    filters: {\n       dateFormat: (bornDied) => {\n           if (bornDied === '') return\n            const months = {\n                \"01\": \"January\",\n                \"02\": \"February\",\n                \"03\": \"March\",\n                \"04\": \"April\",\n                \"05\": \"May\",\n                \"06\": \"June\",\n                \"07\": \"July\",\n                \"08\": \"August\",            // for (i=0, i <= totalPageSet, i++) {\n            //    let  \n            //}\n                \"09\": \"September\",\n                \"10\": \"October\",\n                \"11\": \"November\",\n                \"12\": \"December\"\n            };\n            const date_components = bornDied.split(\"-\");\n            const year = date_components[0];\n            const month = months[date_components[1]];\n            const day = date_components[2];\n            const current = `${day} ${month} ${year}`;\n            return current\n        }\n    },\n    computed: {\n        sortedAuthors() {\n            return this.authorList.sort( (a,b) => {\n                let modifier = 1;\n                if(this.sortDirection === 'desc') modifier = -1\n                if(a[this.sortKey] < b[this.sortKey]) return -1 * modifier\n                if(a[this.sortKey] > b[this.sortKey]) return 1 * modifier\n                return 0;\n            })\n        },\n        pageCount() {\n            const length = this.sortedAuthors.length\n            return this.count = Math.ceil(length/this.pageSize)\n        }, \n        paginatedTable() {\n            const start = this.currentPage * this.pageSize\n            const end = start + this.pageSize\n            const paginated = this.sortedAuthors.slice(start, end)\n            //this.paginationLength = Object.keys(paginated)\n            return paginated\n        },\n        resultQuery(){\n            if(this.search){\n                return this.sortedAuthors.filter((item)=>{\n                    return this.search.toLowerCase().split(' ').every(v => item.name.toLowerCase().includes(v))\n                })\n            }\n            else {\n                return this.paginatedTable;\n            }\n        }\n    }\n}\n</script>\n\n<style lang=\"scss\" scoped>\nth {\n    text-transform: capitalize;\n    cursor: pointer;\n}\n</style>\n"]}]}